var searchIndex = {};
searchIndex["alchemy"] = {"doc":"","items":[[5,"main","alchemy","",null,null],[5,"_Unwind_Resume","","",null,null],[0,"kernel","","This module contains submodules which correspond to various aspects\nof the kernel such as VGA driver, serial port access...",null,null],[0,"vga","alchemy::kernel","This module contains a VGA driver which makes use of a `Mutex` provided\nby the `spin` crate (spinlock) and an `AtomicPtr` to enable access to\nan instance of the `Writer` structure statically.",null,null],[3,"ColorPair","alchemy::kernel::vga","A pair of `Color`s which represents foreground/background.\nNote that both colors are packed into a single `u8` to save space.\nA `VGAChar` is 16-bit and thus the color forms the latter byte. ",null,null],[3,"VGAChar","","This structure represents a single character on the VGA display and its\nformatting options (only foreground and background color at present).\nEach character is two bytes, with the first byte containing the ASCII\ncharacter code and the latter byte containing the formatting options.",null,null],[12,"chr","","",0,null],[12,"color","","",0,null],[3,"Writer","","`Writer` is a representation of VGA state, it contains positioning\ninformation for the current row and column, as well as formatting options\nand an `AtomicPtr` to a `Buffer`.",null,null],[12,"color","","",1,null],[4,"Color","","Enumerative type which is used for foreground and backgroun\ncolors alike.",null,null],[13,"Black","","",2,null],[13,"Blue","","",2,null],[13,"Green","","",2,null],[13,"Cyan","","",2,null],[13,"Red","","",2,null],[13,"Magenta","","",2,null],[13,"Brown","","",2,null],[13,"LightGray","","",2,null],[13,"DarkGray","","",2,null],[13,"LightBlue","","",2,null],[13,"LightGreen","","",2,null],[13,"LightCyan","","",2,null],[13,"LightRed","","",2,null],[13,"Pink","","",2,null],[13,"Yellow","","",2,null],[13,"White","","",2,null],[7,"VGA","","A static VGA which makes use of `spin::Mutex` to provide locking.\nIt is this static structure which makes `println!` et al. possible.",null,null],[17,"HEIGHT","","Height of the VGA output in characters.",null,null],[17,"WIDTH","","Width of the VGA output in characters.",null,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"new","","Create a `ColorPair` from a foreground and background `Color`.",3,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"colorpair"}}],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"new","","Creates a new `Writer` from a `ColorPair`.\nNote that the buffer pointer is hardcoded.",1,{"inputs":[{"name":"colorpair"}],"output":{"name":"writer"}}],[11,"write_byte","","Writes a single byte to the screen, and takes care to handle\nthe edge of the screen and newlines appropriately by updating \nthe structure&#39;s internal state.",1,null],[11,"write_str","","",1,null],[0,"port","alchemy::kernel","This module contains some abstractions over external functions\nwhich are written in native assembly, contained in \nplatforms/(arch)/port.s",null,null],[3,"Serial","alchemy::kernel::port","Primary structure for communicating with serial ports.",null,null],[11,"new","","Create an instance of `Serial` from a 16-bit address.",4,{"inputs":[{"name":"u16"}],"output":{"name":"serial"}}],[11,"outb","","Write a single byte to the serial port.",4,null],[11,"inb","","Read a single byte from the serial port.\nOn the event no byte is available, `0` will be returned.",4,null],[11,"write_str","","",4,null]],"paths":[[3,"VGAChar"],[3,"Writer"],[4,"Color"],[3,"ColorPair"],[3,"Serial"]]};
searchIndex["spin"] = {"doc":"Synchronization primitives based on spinning","items":[[3,"Mutex","spin","This type provides MUTual EXclusion based on spinning.",null,null],[3,"MutexGuard","","A guard to which the protected data can be accessed",null,null],[3,"RwLock","","A reader-writer lock",null,null],[3,"RwLockReadGuard","","A guard to which the protected data can be read",null,null],[3,"RwLockWriteGuard","","A guard to which the protected data can be written",null,null],[3,"Once","","A synchronization primitive which can be used to run a one-time global\ninitialization. Unlike its std equivalent, this is generalized so that The\nclosure returns a value and it is stored. Once therefore acts something like\n1a future, too.",null,null],[11,"new","","Creates a new spinlock wrapping the supplied data.",0,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"into_inner","","Consumes this mutex, returning the underlying data.",0,null],[11,"lock","","Locks the spinlock and returns a guard.",0,null],[11,"try_lock","","Tries to lock the mutex. If it is already locked, it will return None. Otherwise it returns\na guard within Some.",0,null],[11,"fmt","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"mutex"}}],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"drop","","The dropping of the MutexGuard will release the lock it was created from.",1,null],[11,"new","","Creates a new spinlock wrapping the supplied data.",2,{"inputs":[{"name":"t"}],"output":{"name":"rwlock"}}],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",2,null],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",2,null],[11,"try_read","","Attempt to acquire this lock with shared read access.",2,null],[11,"write","","Lock this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",2,null],[11,"try_write","","Attempt to lock this rwlock with exclusive write access.",2,null],[11,"fmt","","",2,null],[11,"default","","",2,{"inputs":[],"output":{"name":"rwlock"}}],[11,"deref","","",3,null],[11,"deref","","",4,null],[11,"deref_mut","","",4,null],[11,"drop","","",3,null],[11,"drop","","",4,null],[11,"new","","Creates a new `Once` value.",5,{"inputs":[],"output":{"name":"once"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.",5,null],[11,"try","","Returns a pointer iff the `Once` was previously initialized",5,null],[11,"wait","","Like try, but will spin if the `Once` is in the process of being\ninitialized",5,null]],"paths":[[3,"Mutex"],[3,"MutexGuard"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"Once"]]};
searchIndex["rlibc"] = {"doc":"A bare-metal library supplying functions rustc may lower code to","items":[[5,"memcpy","rlibc","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"memcmp","","",null,null]],"paths":[]};
initSearch(searchIndex);
